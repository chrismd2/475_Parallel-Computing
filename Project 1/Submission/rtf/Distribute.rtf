{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16  1  \cb3\cf13 #include<stdlib.h>
\par \cb1\cf0\ul0\i0\b0  2  \cb3\cf13 #include<stdio.h>
\par \cb1\cf0\ul0\i0\b0  3  \cb3\cf13 #include "mpi.h"
\par \cb1\cf0\ul0\i0\b0  4  
\par \cb1\cf0\ul0\i0\b0  5  
\par \cb1\cf0\ul0\i0\b0  6  \cb3\cf11\b int \b0\cb1\cf0 main\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 argc\cb3\cf22 , \cb3\cf11\b char \b0\cb3\cf22 *\cb1\cf0 argv\cb3\cf22 [])
\par \cb1\cf0\ul0\i0\b0  7  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  8    \cb3\cf11\b int \b0\cb1\cf0 N\cb3\cf22 , \cb1\cf0 npes\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  9      \cb3\cf11\b int \b0\cb1\cf0 myrank\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 10      \cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 , \cb1\cf0 size\cb3\cf22 , \cb1\cf0 grp_size\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 11      \cb3\cf11\b int\b0\cb3\cf22 * \cb1\cf0 buf\cb3\cf22 ; \cb3\cf4 /*receive buffer*/
\par \cb1\cf0\ul0\i0\b0 12    \cb3\cf11\b int\b0\cb3\cf22 * \cb1\cf0 vbuf\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 13      \cb3\cf11\b int \b0\cb1\cf0 recv_count\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 14      \cb3\cf11\b int \b0\cb1\cf0 myresult \cb3\cf22 = \cb3\cf9 0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 15      \cb3\cf11\b int \b0\cb1\cf0 result\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 16  
\par \cb1\cf0\ul0\i0\b0 17      \cb1\cf0 MPI_Init\cb3\cf22 (&\cb1\cf0 argc\cb3\cf22 ,&\cb1\cf0 argv\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 18      \cb1\cf0 MPI_Comm_size\cb3\cf22 (\cb1\cf0 MPI_COMM_WORLD\cb3\cf22 , &\cb1\cf0 npes\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 19      \cb1\cf0 MPI_Comm_size\cb3\cf22 (\cb1\cf0 MPI_COMM_WORLD\cb3\cf22 , &\cb1\cf0 grp_size\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 20      \cb1\cf0 MPI_Comm_rank\cb3\cf22 (\cb1\cf0 MPI_COMM_WORLD\cb3\cf22 , &\cb1\cf0 myrank\cb3\cf22 ); \cb3\cf4 /* find rank */
\par \cb1\cf0\ul0\i0\b0 21  
\par \cb1\cf0\ul0\i0\b0 22    \cb1\cf0 N \cb3\cf22 = \cb1\cf0 npes\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 23      \cb3\cf11\b int \b0\cb1\cf0 A\cb3\cf22 [\cb3\cf9 64\cb3\cf22 ][\cb3\cf9 64\cb3\cf22 ];  \cb3\cf4 /*data to be distribued from the root process*/
\par \cb1\cf0\ul0\i0\b0 24    \cb3\cf11\b int \b0\cb1\cf0 b\cb3\cf22 [\cb3\cf9 64\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0 25  
\par \cb1\cf0\ul0\i0\b0 26      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 myrank \cb3\cf22 == \cb3\cf9 0\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 27      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 28      \cb3\cf5 //open file and place it into 2d array
\par \cb1\cf0\ul0\i0\b0 29      \cb1\cf0 FILE \cb3\cf22 *\cb1\cf0 data\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 30      \cb1\cf0 data \cb3\cf22 = \cb1\cf0 fopen\cb3\cf22 (\cb3\cf17 "Data2.csv"\cb3\cf22 , \cb3\cf17 "r"\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 31      char currentChar = getc(data);
\par \cb1\cf0\ul0\i0\b0 32      char str[] = "";
\par \cb1\cf0\ul0\i0\b0 33      for(i=0;i<64; i++)\{
\par \cb1\cf0\ul0\i0\b0 34        for(int j=0; j<64; j++)\{
\par \cb1\cf0\ul0\i0\b0 35          A[i][j] = 0;
\par \cb1\cf0\ul0\i0\b0 36          while(currentChar!=',' && currentChar!=EOF)\{
\par \cb1\cf0\ul0\i0\b0 37            A[i][j] = 10 * A[i][j] + (currentChar - '0');
\par \cb1\cf0\ul0\i0\b0 38            currentChar = getc(data);
\par \cb1\cf0\ul0\i0\b0 39          \}//end of searching for end of number
\par \cb1\cf0\ul0\i0\b0 40          currentChar = getc(data);
\par \cb1\cf0\ul0\i0\b0 41        \}//end of filling current row
\par \cb1\cf0\ul0\i0\b0 42      \}//end of filling matrix
\par \cb1\cf0\ul0\i0\b0 43  
\par \cb1\cf0\ul0\i0\b0 44      for(int i = 0; i < 64; i++)\{
\par \cb1\cf0\ul0\i0\b0 45        b[i] = i + 1;
\par \cb1\cf0\ul0\i0\b0 46      \}//end filling vector b
\par \cb1\cf0\ul0\i0\b0 47      \}//end of initialization by P0
\par \cb1\cf0\ul0\i0\b0 48  
\par \cb1\cf0\ul0\i0\b0 49      recv_count = 64*64/npes;
\par \cb1\cf0\ul0\i0\b0 50      buf = (int* )malloc(recv_count*sizeof(int));
\par \cb1\cf0\ul0\i0\b0 51    vbuf = (int* )malloc(recv_count*sizeof(int));
\par \cb1\cf0\ul0\i0\b0 52  
\par \cb1\cf0\ul0\i0\b0 53    MPI_Scatter(A,recv_count,MPI_INT,buf,recv_count, MPI_INT,0,MPI_COMM_WORLD);
\par \cb1\cf0\ul0\i0\b0 54  
\par \cb1\cf0\ul0\i0\b0 55      printf("The data from matrix A received by process %d\\n", myrank);
\par \cb1\cf0\ul0\i0\b0 56      for (i = 0; i<recv_count; i++)
\par \cb1\cf0\ul0\i0\b0 57          printf("%d ", buf[i]);
\par \cb1\cf0\ul0\i0\b0 58      printf("\\n\\n");
\par \cb1\cf0\ul0\i0\b0 59  
\par \cb1\cf0\ul0\i0\b0 60    MPI_Request request;
\par \cb1\cf0\ul0\i0\b0 61  
\par \cb1\cf0\ul0\i0\b0 62    if(myrank == 0)\{
\par \cb1\cf0\ul0\i0\b0 63      int flag;
\par \cb1\cf0\ul0\i0\b0 64      int tbuf;
\par \cb1\cf0\ul0\i0\b0 65      MPI_Status status;
\par \cb1\cf0\ul0\i0\b0 66      MPI_Irecv(&tbuf, 1, MPI_INT, MPI_ANY_TAG, 0, MPI_COMM_WORLD, &request);
\par \cb1\cf0\ul0\i0\b0 67      MPI_Wait(&request, &status);
\par \cb1\cf0\ul0\i0\b0 68      printf("%d waited\\n", myrank);
\par \cb1\cf0\ul0\i0\b0 69    \}//P0 sent message to continue
\par \cb1\cf0\ul0\i0\b0 70    if(myrank > 0)\{
\par \cb1\cf0\ul0\i0\b0 71      int flag;
\par \cb1\cf0\ul0\i0\b0 72      MPI_Status status;
\par \cb1\cf0\ul0\i0\b0 73      MPI_Isend(&flag, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &request);
\par \cb1\cf0\ul0\i0\b0 74      MPI_Test(&request, &flag, &status);
\par \cb1\cf0\ul0\i0\b0 75      printf("%d going to wait\\n", myrank);
\par \cb1\cf0\ul0\i0\b0 76      while (!flag) \{
\par \cb1\cf0\ul0\i0\b0 77        MPI_Test(&request, &flag, &status);
\par \cb1\cf0\ul0\i0\b0 78      \}
\par \cb1\cf0\ul0\i0\b0 79      printf("%d done waiting\\n", myrank);
\par \cb1\cf0\ul0\i0\b0 80    \}//other proceses wait for P0
\par \cb1\cf0\ul0\i0\b0 81  
\par \cb1\cf0\ul0\i0\b0 82    MPI_Scatter(b,64/npes,MPI_INT,vbuf,64/npes, MPI_INT,0,MPI_COMM_WORLD);
\par \cb1\cf0\ul0\i0\b0 83  
\par \cb1\cf0\ul0\i0\b0 84    printf("The data recieved from vector b recieved by process %d\\n", myrank);
\par \cb1\cf0\ul0\i0\b0 85    for (size_t i = 0; i < 64/npes; i++) \{
\par \cb1\cf0\ul0\i0\b0 86      printf("%d ", vbuf[i]);
\par \cb1\cf0\ul0\i0\b0 87    \}//end of printing vector b
\par \cb1\cf0\ul0\i0\b0 88    printf("\\n");
\par \cb1\cf0\ul0\i0\b0 89  
\par \cb1\cf0\ul0\i0\b0 90      MPI_Finalize();
\par \cb1\cf0\ul0\i0\b0 91  
\par \cb1\cf0\ul0\i0\b0 92      return 0;
\par \cb1\cf0\ul0\i0\b0 93  \}//end main
\par }