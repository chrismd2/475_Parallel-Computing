{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs16  1  \cb3\cf4 /*
\par \cb1\cf0\ul0\i0\b0  2  \cb3\cf4 FindMin.c by Mark Christenson finds the minimum number in a set of numbers saved as Data.csv
\par \cb1\cf0\ul0\i0\b0  3  \cb3\cf4 */
\par \cb1\cf0\ul0\i0\b0  4  
\par \cb1\cf0\ul0\i0\b0  5  \cb3\cf13 #include <stdlib.h>
\par \cb1\cf0\ul0\i0\b0  6  \cb3\cf13 #include <stdio.h>
\par \cb1\cf0\ul0\i0\b0  7  \cb3\cf13 #include "mpi.h"
\par \cb1\cf0\ul0\i0\b0  8  
\par \cb1\cf0\ul0\i0\b0  9  
\par \cb1\cf0\ul0\i0\b0 10  \cb3\cf11\b int \b0\cb1\cf0 main\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 argc\cb3\cf22 , \cb3\cf11\b char \b0\cb3\cf22 *\cb1\cf0 argv\cb3\cf22 [])
\par \cb1\cf0\ul0\i0\b0 11  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 12      \cb3\cf11\b int \b0\cb1\cf0 npes\cb3\cf22 , \cb1\cf0 myrank\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 13      \cb3\cf11\b int \b0\cb1\cf0 totalElements \cb3\cf22 = \cb3\cf9 10000\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 14  
\par \cb1\cf0\ul0\i0\b0 15      \cb1\cf0 MPI_Init\cb3\cf22 (&\cb1\cf0 argc\cb3\cf22 ,&\cb1\cf0 argv\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 16      \cb1\cf0 MPI_Comm_size\cb3\cf22 (\cb1\cf0 MPI_COMM_WORLD\cb3\cf22 ,&\cb1\cf0 npes\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 17      \cb1\cf0 MPI_Comm_rank\cb3\cf22 (\cb1\cf0 MPI_COMM_WORLD\cb3\cf22 ,&\cb1\cf0 myrank\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 18  
\par \cb1\cf0\ul0\i0\b0 19      \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "Process %d out of %d started\\n"\cb3\cf22 , \cb1\cf0 myrank\cb3\cf22 , \cb1\cf0 npes\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 20  
\par \cb1\cf0\ul0\i0\b0 21    \cb3\cf5 //Open file
\par \cb1\cf0\ul0\i0\b0 22    \cb1\cf0 FILE \cb3\cf22 *\cb1\cf0 data\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 23    \cb1\cf0 data \cb3\cf22 = \cb1\cf0 fopen\cb3\cf22 (\cb3\cf17 "Data.csv"\cb3\cf22 , \cb3\cf17 "r"\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 24    \cb3\cf5 //Compute my position = (my rank * total data elements) / number of processes
\par \cb1\cf0\ul0\i0\b0 25    \cb3\cf11\b int \b0\cb1\cf0 myPosition \cb3\cf22 = \cb3\cf9 4 \cb3\cf22 * (\cb1\cf0 myrank \cb3\cf22 * \cb1\cf0 totalElements\cb3\cf22 )/\cb1\cf0 npes\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 26  
\par \cb1\cf0\ul0\i0\b0 27    \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "%d positioned at %d\\n"\cb3\cf22 , \cb1\cf0 myrank\cb3\cf22 , \cb1\cf0 myPosition\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 28    \cb3\cf5 //Go to my position
\par \cb1\cf0\ul0\i0\b0 29    \cb1\cf0 fseek\cb3\cf22 (\cb1\cf0 data\cb3\cf22 , \cb1\cf0 myPosition\cb3\cf22 , \cb3\cf9 0\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 30    \cb3\cf11\b char \b0\cb1\cf0 currentChar \cb3\cf22 = \cb1\cf0 getc\cb3\cf22 (\cb1\cf0 data\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 31    \cb3\cf5 //printf("%d found %c", myrank, currentChar);
\par \cb1\cf0\ul0\i0\b0 32    \cb3\cf5 //consider trying to find the previous comma if my rank != 0
\par \cb1\cf0\ul0\i0\b0 33    \cb3\cf5 //read numbers
\par \cb1\cf0\ul0\i0\b0 34    \cb3\cf11\b char \b0\cb1\cf0 str\cb3\cf22 [] = \cb3\cf17 ""\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 35    \cb3\cf11\b int \b0\cb1\cf0 best \cb3\cf22 = \cb3\cf9 1000\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 36    \cb3\cf11\b for\b0\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 i \cb3\cf22 = \cb3\cf9 0\cb3\cf22 ; \cb1\cf0 i \cb3\cf22 < \cb3\cf9 4\cb3\cf22 *(\cb1\cf0 totalElements\cb3\cf22 /\cb1\cf0 npes\cb3\cf22 ); \cb1\cf0 i\cb3\cf22 ++)\{
\par \cb1\cf0\ul0\i0\b0 37      \cb3\cf11\b int \b0\cb1\cf0 tBest \cb3\cf22 = \cb3\cf9 0\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 38      \cb3\cf11\b while\b0\cb3\cf22 (\cb1\cf0 currentChar\cb3\cf22 !=\cb3\cf19 ',' \cb3\cf22 && \cb1\cf0 currentChar\cb3\cf22 !=\cb1\cf0 EOF\cb3\cf22 )\{
\par \cb1\cf0\ul0\i0\b0 39        \cb1\cf0 tBest \cb3\cf22 = \cb3\cf9 10 \cb3\cf22 * \cb1\cf0 tBest \cb3\cf22 + (\cb1\cf0 currentChar \cb3\cf22 - \cb3\cf19 '0'\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 40        \cb3\cf5 //printf("%c", currentChar);
\par \cb1\cf0\ul0\i0\b0 41        \cb1\cf0 currentChar \cb3\cf22 = \cb1\cf0 getc\cb3\cf22 (\cb1\cf0 data\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 42      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 43      \cb3\cf5 //printf("\\n%d current number is %d", myrank, tBest);
\par \cb1\cf0\ul0\i0\b0 44      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 best \cb3\cf22 > \cb1\cf0 tBest \cb3\cf22 && \cb1\cf0 tBest \cb3\cf22 > \cb3\cf9 0\cb3\cf22 )\{\cb1\cf0 best \cb3\cf22 = \cb1\cf0 tBest\cb3\cf22 ;\}
\par \cb1\cf0\ul0\i0\b0 45    \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 46    \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\n%d final number is %d\\n"\cb3\cf22 , \cb1\cf0 myrank\cb3\cf22 , \cb1\cf0 best\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 47  
\par \cb1\cf0\ul0\i0\b0 48    \cb3\cf11\b int \b0\cb1\cf0 size\cb3\cf22 , \cb1\cf0 grp_size\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 49    \cb3\cf11\b int \b0\cb3\cf22 *\cb1\cf0 buf\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 50  
\par \cb1\cf0\ul0\i0\b0 51    \cb1\cf0 MPI_Barrier\cb3\cf22 (\cb1\cf0 MPI_COMM_WORLD\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 52  
\par \cb1\cf0\ul0\i0\b0 53    \cb3\cf11\b if \b0\cb3\cf22 (\cb1\cf0 myrank \cb3\cf22 == \cb3\cf9 0\cb3\cf22 )\{
\par \cb1\cf0\ul0\i0\b0 54      \cb1\cf0 MPI_Comm_size\cb3\cf22 (\cb1\cf0 MPI_COMM_WORLD\cb3\cf22 , &\cb1\cf0 grp_size\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 55      \cb1\cf0 size \cb3\cf22 = \cb1\cf0 grp_size\cb3\cf22 *\cb3\cf11\b sizeof\b0\cb3\cf22 (\cb3\cf11\b int\b0\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 56      \cb1\cf0 buf \cb3\cf22 = (\cb3\cf11\b int \b0\cb3\cf22 *)\cb1\cf0 malloc\cb3\cf22 (\cb1\cf0 size\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 57    \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 58  
\par \cb1\cf0\ul0\i0\b0 59    \cb3\cf11\b int \b0\cb1\cf0 mBest\cb3\cf22 [\cb1\cf0 npes\cb3\cf22 ];
\par \cb1\cf0\ul0\i0\b0 60    \cb1\cf0 mBest\cb3\cf22 [\cb3\cf9 0\cb3\cf22 ] = \cb1\cf0 best\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 61    \cb1\cf0 MPI_Gather\cb3\cf22 (\cb1\cf0 mBest\cb3\cf22 , \cb3\cf9 1\cb3\cf22 , \cb1\cf0 MPI_INT\cb3\cf22 , \cb1\cf0 buf\cb3\cf22 , \cb3\cf9 1\cb3\cf22 , \cb1\cf0 MPI_INT\cb3\cf22 , \cb3\cf9 0\cb3\cf22 , \cb1\cf0 MPI_COMM_WORLD\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 62    \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 myrank \cb3\cf22 == \cb3\cf9 0\cb3\cf22 )\{
\par \cb1\cf0\ul0\i0\b0 63      \cb3\cf11\b for \b0\cb3\cf22 (\cb3\cf11\b size_t \b0\cb1\cf0 i \cb3\cf22 = \cb3\cf9 0\cb3\cf22 ; \cb1\cf0 i \cb3\cf22 < \cb1\cf0 npes\cb3\cf22 ; \cb1\cf0 i\cb3\cf22 ++) \{
\par \cb1\cf0\ul0\i0\b0 64        \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "%d: %d\\n"\cb3\cf22 , \cb1\cf0 i\cb3\cf22 , \cb1\cf0 buf\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ]);
\par \cb1\cf0\ul0\i0\b0 65        \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 best\cb3\cf22 >\cb1\cf0 buf\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ])\{\cb1\cf0 best\cb3\cf22 =\cb1\cf0 buf\cb3\cf22 [\cb1\cf0 i\cb3\cf22 ];\}
\par \cb1\cf0\ul0\i0\b0 66      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 67      \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "Best is %d\\n"\cb3\cf22 , \cb1\cf0 best\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 68    \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 69    \cb3\cf4 /*
\par \cb1\cf0\ul0\i0\b0 70    \cb3\cf4 //Send best to 0
\par \cb1\cf0\ul0\i0\b0 71    int mBest[npes];
\par \cb1\cf0\ul0\i0\b0 72    mBest[myrank] = best;
\par \cb1\cf0\ul0\i0\b0 73    if(myrank > 0)\{
\par \cb1\cf0\ul0\i0\b0 74      printf("%d sending message\\n", myrank);
\par \cb1\cf0\ul0\i0\b0 75      MPI_Send(mBest, 1, MPI_INT, 0, myrank, MPI_COMM_WORLD);
\par \cb1\cf0\ul0\i0\b0 76      printf("%d sent message\\n", myrank);
\par \cb1\cf0\ul0\i0\b0 77    \}
\par \cb1\cf0\ul0\i0\b0 78    //0 output best
\par \cb1\cf0\ul0\i0\b0 79    else if(myrank == 0)\{
\par \cb1\cf0\ul0\i0\b0 80      int inbox[npes+1];
\par \cb1\cf0\ul0\i0\b0 81      MPI_Status status[npes+1];
\par \cb1\cf0\ul0\i0\b0 82      inbox[0] = best;
\par \cb1\cf0\ul0\i0\b0 83      for (size_t i = 1; i < npes; i++) \{
\par \cb1\cf0\ul0\i0\b0 84        printf("waiting for messages\\n");
\par \cb1\cf0\ul0\i0\b0 85        MPI_Gather(inbox, npes, MPI_INT, buf, npes, MPI_INT, 0, MPI_COMM_WORLD);
\par \cb1\cf0\ul0\i0\b0 86        if(inbox[0]>inbox[i])\{inbox[0]=inbox[i];\}
\par \cb1\cf0\ul0\i0\b0 87        printf("current inbox best: %d\\n", inbox[0]);
\par \cb1\cf0\ul0\i0\b0 88      \}
\par \cb1\cf0\ul0\i0\b0 89      printf("final inbox best: %d\\n", inbox[0]);
\par \cb1\cf0\ul0\i0\b0 90    \}
\par \cb1\cf0\ul0\i0\b0 91    */
\par \cb1\cf0\ul0\i0\b0 92  
\par \cb1\cf0\ul0\i0\b0 93      MPI_Finalize();
\par \cb1\cf0\ul0\i0\b0 94  
\par \cb1\cf0\ul0\i0\b0 95    //close(data);
\par \cb1\cf0\ul0\i0\b0 96      return 0;
\par \cb1\cf0\ul0\i0\b0 97  \}
\par }